<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Signals on Vrecan...</title>
    <link>http://vrecan.github.io/tags/signals/</link>
    <description>Recent content in Signals on Vrecan...</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Mar 2015 22:11:18 -0600</lastBuildDate>
    <atom:link href="http://vrecan.github.io/tags/signals/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Parallel Graceful Shutdown in Go</title>
      <link>http://vrecan.github.io/post/death_parallel_shutdown/</link>
      <pubDate>Thu, 19 Mar 2015 22:11:18 -0600</pubDate>
      
      <guid>http://vrecan.github.io/post/death_parallel_shutdown/</guid>
      <description>

&lt;h3 id=&#34;overview:d43027cab780c369fd9e2e145dc0c7e6&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;After using &lt;a href=&#34;http://github.com/vrecan/death&#34;&gt;death&lt;/a&gt; for awhile I started to run into issues closing objects. Mainly that some poorly written code would never close and the app would hang and require me to force kill the app. This seemed like a perfect oppurtunity to use go routines and channels to solve a relatively complex threading problem. What I really want is parallel shutdown with an overall timeout that will shutdown even if something fails.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/vrecan/death&#34; title=&#34;Application shutdown library for golang&#34;&gt;Link to github project&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;how-does-it-work:d43027cab780c369fd9e2e145dc0c7e6&#34;&gt;How does it work?&lt;/h3&gt;

&lt;p&gt;So lets look at the new Wait for death method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Wait for death and then kill all items that need to die.
func (d *Death) WaitForDeath(closable ...Closable) {
	d.wg.Wait()
	log.Info(&amp;quot;Shutdown started...&amp;quot;)
	count := len(closable)
	log.Debug(&amp;quot;Closing &amp;quot;, count, &amp;quot; objects&amp;quot;)
	if count &amp;gt; 0 {
		d.closeInMass(closable...)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What you will see here is that now instead of calling close we are now calling this close in mass method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Close all the objects at once and wait forr them to finish with a channel.
func (d *Death) closeInMass(closable ...Closable) {
	count := len(closable)
	//call close async
	done := make(chan bool, count)

	for _, c := range closable {
		go d.closeObjects(c, done)
	}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Close in mass is going to get the size of the slice and then make a channel to receive done messages. This channel will then be passed to a goroutine that sends a message when close is finished.&lt;/p&gt;

&lt;p&gt;Here is what the function looks like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Close objects and return a bool when finished on a channel.
func (d *Death) closeObjects(c Closable, done chan&amp;lt;- bool) {
	c.Close()
	done &amp;lt;- true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we use a timer and a select statement to wait for events on the timer channel and the done channel.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	//wait on channel for notifications.

	timer := time.NewTimer(d.timeout)
	for {
		select {
		case &amp;lt;-timer.C:
			log.Warn(count, &amp;quot; object(s) remaining but timer expired.&amp;quot;)
			return
		case &amp;lt;-done:
			count--
			log.Debug(count, &amp;quot; object(s) left&amp;quot;)
			if count == 0 {
				log.Debug(&amp;quot;Finished closing objects&amp;quot;)
				return
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will block until our timer event is triggered or the number of goroutines running equals 0.&lt;/p&gt;

&lt;h1 id=&#34;summary:d43027cab780c369fd9e2e145dc0c7e6&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;With this change my applications have seen a 2-3x shutdown speed increase with the benefit of always shutting down even if a bad objects close method never returns.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/vrecan/death&#34; title=&#34;Application shutdown library for golang&#34;&gt;Managing death in go&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Managing Application Shutdown in Go</title>
      <link>http://vrecan.github.io/post/golang_shutdown/</link>
      <pubDate>Tue, 10 Mar 2015 20:23:05 -0600</pubDate>
      
      <guid>http://vrecan.github.io/post/golang_shutdown/</guid>
      <description>

&lt;h3 id=&#34;overview:a3f014005cf18d6d375bffc268e2748e&#34;&gt;Overview&lt;/h3&gt;

&lt;p&gt;I was looking around and couldn&amp;rsquo;t find a simple library that would manage application shutdown using signals. I decided to build a simple library to handle application shutdown and calling Close methods on structs when shutdown was signaled. It is called &lt;a href=&#34;http://github.com/vrecan/death&#34; title=&#34;Application shutdown library for golang&#34;&gt;death&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;requirements:a3f014005cf18d6d375bffc268e2748e&#34;&gt;Requirements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Should only need to pass the signals you want to use for shutdown.&lt;/li&gt;
&lt;li&gt;Block the application from shutting down until signal was recieved.&lt;/li&gt;
&lt;li&gt;Optionally pass structs with a Close method to cleanup objects when shutdown is signaled.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;how-do-you-use-it:a3f014005cf18d6d375bffc268e2748e&#34;&gt;How do you use it?&lt;/h3&gt;

&lt;p&gt;Import death and syscall so that you can pass the signals you want to shutdown with.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    DEATH &amp;quot;github.com/vrecan/death&amp;quot;
    SYS &amp;quot;syscall&amp;quot;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create a death struct with the signals we want to use for shutdown.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    death := DEATH.NewDeath(SYS.SIGINT, SYS.SIGTERM)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we are doing setting up everything in our application we can then call WaitForDeath() to block our application from shutting down.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    death.WaitForDeath()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also have death automically close structs for you when shutdown is triggered. Create a slice to contain all the items you want to call Close().&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;objects := make([]DEATH.Closable, 0)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your structs just need a Close() method to implement the Closable interface&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type NewType struct {
}

func (n *NewType) Close() {
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once your go routine(s) have been started append them to the slice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    objects = append(objects, &amp;amp;NewType{})

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now just pass them in when you are going to call WaitForDeath()&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    death.WaitForDeath(objects...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also pass them in one by one if you prefer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;death.WaitForDeath(object1, object2, object3)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update:a3f014005cf18d6d375bffc268e2748e&#34;&gt;&lt;strong&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The newest version now does closing of objects in parallel with a timeout. This allows you to limit how long you are willing to wait for shutdown of all your objects. Because they are in parallel this is the total time you are willing to wait and not per object.
&lt;a href=&#34;http://vrecan.github.io/post/death_parallel_shutdown/&#34; title=&#34;Application shutdown library for golang&#34;&gt;Parallel shutdown in go&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;summary:a3f014005cf18d6d375bffc268e2748e&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m actually pretty happy with this library. It does everything I need it to do and has been really useful to just drop in and have solid shutdown management. It does currently use seelog to log a few things this could easily be removed. All of our applications use seelog for application logs but I would love to hear if there are any good ideas about managing logging inside of libraries. I&amp;rsquo;ve thought about having the ablilty to pass in a logger with an interface but I would like to hear how other people deal with this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/vrecan/death&#34; title=&#34;Application shutdown library for golang&#34;&gt;Managing death in go&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>